#!/usr/bin/env node

/**
 * Tallr CLI - Simple entry point for tracking AI CLI sessions
 * 
 * Usage:
 *   tallr claude --help
 *   tallr gemini "write a function"
 *   TALLR_TOKEN=mytoken tallr claude
 */

import { fileURLToPath } from 'url';
import { dirname, join } from 'path';
import { spawn } from 'child_process';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Path to the actual wrapper
const wrapperPath = join(__dirname, 'tl-wrap.js');

// Get command line arguments
const args = process.argv.slice(2);

if (args.length === 0 || args[0] === '--help' || args[0] === '-h') {
  console.log('Usage: tallr <command> [args...]');
  console.log('');
  console.log('Examples:');
  console.log('  tallr claude --help');
  console.log('  tallr gemini "write a function"');
  console.log('  tallr claude');
  console.log('');
  console.log('Environment variables:');
  console.log('  TALLR_TOKEN   - Authentication token (optional)');
  console.log('  TL_PROJECT     - Override project name');
  console.log('  TL_REPO        - Override repo path');
  console.log('  TL_IDE         - Preferred IDE (cursor, vscode)');
  console.log('');
  console.log('The Tallr app must be running to see tracked sessions.');
  process.exit(1);
}

// Set default environment variables if not provided
const env = { ...process.env };

// Auto-detect project name from current directory if not set
if (!env.TL_PROJECT) {
  const cwd = process.cwd();
  const projectName = cwd.split('/').pop() || 'unknown-project';
  env.TL_PROJECT = projectName;
}

// Set repo path to current directory if not set
if (!env.TL_REPO) {
  env.TL_REPO = process.cwd();
}

// Set agent based on first argument
if (!env.TL_AGENT && args.length > 0) {
  env.TL_AGENT = args[0];
}

// Set title based on command
if (!env.TL_TITLE && args.length > 0) {
  env.TL_TITLE = `${args[0]} session`;
}

// Spawn the wrapper with the provided arguments
const child = spawn('node', [wrapperPath, ...args], {
  stdio: 'inherit',
  env
});

// Forward exit code
child.on('close', (code) => {
  process.exit(code);
});

// Handle errors
child.on('error', (error) => {
  console.error('Failed to start wrapper:', error.message);
  process.exit(1);
});